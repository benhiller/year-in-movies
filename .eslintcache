[{"/Users/benhiller/Code/year-in-movies/src/index.js":"1","/Users/benhiller/Code/year-in-movies/src/App.js":"2","/Users/benhiller/Code/year-in-movies/src/reportWebVitals.js":"3","/Users/benhiller/Code/year-in-movies/src/PostersGrid.jsx":"4"},{"size":575,"mtime":1607333947486,"results":"5","hashOfConfig":"6"},{"size":4937,"mtime":1607333951364,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1607333204685,"results":"8","hashOfConfig":"6"},{"size":2137,"mtime":1607333497516,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17f73jx",{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},"/Users/benhiller/Code/year-in-movies/src/index.js",[],"/Users/benhiller/Code/year-in-movies/src/App.js",["20","21","22","23"],"/Users/benhiller/Code/year-in-movies/src/reportWebVitals.js",[],["24","25","26","27","28"],"/Users/benhiller/Code/year-in-movies/src/PostersGrid.jsx",["29"],"import { useMemo } from 'react';\nimport useMeasure from 'react-use-measure';\nimport { useTransition, a } from 'react-spring';\n\nimport styles from './styles/PostersGrid.module.css';\n\nconst POSTER_WIDTH = 100;\nconst POSTER_HEIGHT = 150;\nconst POSTER_SPACING = 10;\n\nconst PostersGrid = ({ movies }) => {\n  const [ref, bounds] = useMeasure();\n  const { width: w } = bounds;\n  // necessary so xy values don't get all messed up on initial render\n  const width = w || 600;\n\n  // TODO - cleanup\n  let columns = 1;\n  while (columns * POSTER_WIDTH + (columns - 1) * POSTER_SPACING < width) {\n    columns += 1;\n  }\n  columns--;\n\n  // TODO - poster spacing should be evenly distributed based on width\n  const gridItems = useMemo(() => {\n    return movies.map((child, i) => {\n      const column = i % columns;\n      const xy = [\n        POSTER_WIDTH * column + Math.max(0, POSTER_SPACING * column),\n        POSTER_HEIGHT * Math.floor(i / columns) +\n          Math.max(0, POSTER_SPACING * Math.floor(i / columns)),\n      ];\n      return { ...child, xy, width: POSTER_WIDTH, height: POSTER_HEIGHT };\n    });\n  }, [columns, movies]);\n\n  // Hook6: Turn the static grid values into animated transitions, any addition, removal or change will be animated\n  const transitions = useTransition(gridItems, (item) => item.title, {\n    from: ({ xy, width, height }) => ({ xy, width, height, opacity: 0 }),\n    enter: ({ xy, width, height }) => ({ xy, width, height, opacity: 1 }),\n    update: ({ xy, width, height }) => ({ xy, width, height }),\n    leave: { height: 0, opacity: 0 },\n    config: { mass: 5, tension: 500, friction: 100 },\n    trail: 25,\n  });\n\n  return (\n    <div className={styles.posters} ref={ref}>\n      {transitions.map(({ item, props: { xy, ...rest }, key }) => {\n        return (\n          <a.div\n            key={key}\n            style={{\n              transform: xy.interpolate((x, y) => {\n                return `translate3d(${x}px,${y}px,0)`;\n              }),\n              ...rest,\n            }}\n          >\n            <img src={item.poster} />\n          </a.div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default PostersGrid;\n",{"ruleId":"30","severity":1,"message":"31","line":133,"column":17,"nodeType":"32","endLine":133,"endColumn":81},{"ruleId":"30","severity":1,"message":"31","line":145,"column":17,"nodeType":"32","endLine":145,"endColumn":75},{"ruleId":"30","severity":1,"message":"31","line":157,"column":17,"nodeType":"32","endLine":157,"endColumn":77},{"ruleId":"30","severity":1,"message":"31","line":169,"column":13,"nodeType":"32","endLine":169,"endColumn":81},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":60,"column":13,"nodeType":"32","endLine":60,"endColumn":38},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["45"],"no-negated-in-lhs",["46"],"handle-callback-err",[],"no-new-require",[],"no-path-concat",[],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]